
rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Allow authenticated users to upload room images (admins only)
    match /rooms/{roomId}/{allPaths=**} {
      allow read: if true; // Anyone can view room images
      allow write: if request.auth != null && 
                   (request.auth.token.admin == true || 
                    request.auth.uid == resource.metadata.uploadedBy);
      allow delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Allow users to upload and manage their own profile pictures
    match /users/{userId}/profile/{allPaths=**} {
      allow read: if true; // Profile pictures can be viewed by anyone
      allow write: if request.auth != null && 
                    (request.auth.uid == userId || request.auth.token.admin == true);
      allow delete: if request.auth != null && 
                     (request.auth.uid == userId || request.auth.token.admin == true);
    }
    
    // Allow authenticated users to upload booking-related documents
    match /bookings/{bookingId}/{allPaths=**} {
      allow read: if request.auth != null && 
                   (resource.metadata.uploadedBy == request.auth.uid ||
                    request.auth.token.admin == true);
      allow write: if request.auth != null;
      allow delete: if request.auth != null && 
                     (resource.metadata.uploadedBy == request.auth.uid ||
                      request.auth.token.admin == true);
    }
    
    // Admin-only access to general uploads
    match /admin/{allPaths=**} {
      allow read, write, delete: if request.auth != null && request.auth.token.admin == true;
    }
    
    // Temporary uploads for processing (24-hour auto-cleanup)
    match /temp/{allPaths=**} {
      allow read, write, delete: if request.auth != null;
    }
    
    // Fallback rule - deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
